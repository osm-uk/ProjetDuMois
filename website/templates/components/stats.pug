//- Synthetic stats
div.row.mb-4#stats-blocks
	div.col.text-center
		div.spinner-border.text-primary(role="status" style="width: 64px; height: 64px")

div.row
	//- Leaderboard
	div.col-12.mb-4
		h3= __("Podium")
		p#stats-leaderboard-noauth.text-center
			| #{__("Inscrivez-vous ou connectez-vous pour voir le podium")}
			br.mb-2
			+user_connect
		div#stats-leaderboard-container.d-none.row.align-items-center
			div#stats-podium.col-md-7.row.justify-content-start.align-items-end.no-gutters.mb-3.mb-md-0
			div.overflow-auto.col-md-5.px-0(style="max-height: 300px")
				table.table.table-sm
					thead.sticky-top.thead-light
						tr
							th(scope="col") #
							th(scope="col")= __("Pseudo")
							th(scope="col")= __("Points")
					tbody#stats-leaderboard

	//- Charts
	div.col-lg-6.mb-2#stats-chart-container
		h3= __("Avancement")
		div.spinner-charts.spinner-border.text-primary(role="status" style="width: 64px; height: 64px")
		canvas#stats-chart.w-100(height="300")

	div.col-lg-6.mb-2#stats-chart-notes-container
		h3= __("Notes")
		div.spinner-charts.spinner-border.text-primary(role="status" style="width: 64px; height: 64px")
		canvas#stats-chart-notes.w-100(height="300")

	div.col-lg-6.mb-2#stats-chart-keys-container
		h3= __("Clés fréquentes")
		div.spinner-charts.spinner-border.text-primary(role="status" style="width: 64px; height: 64px")
		canvas#stats-chart-keys.w-100(height="300")

script.
	function showStatistics() {
		fetch("/projects/#{id}/stats"+(window.osm_user ? "?osm_user="+window.osm_user.name : ""))
		.then(res => res.json())
		.then(res => {
			const blocks = document.getElementById("stats-blocks");
			blocks.innerHTML = '';
			const addBlock = (title, subtitle) => {
				const b = document.createElement("div");
				b.classList.add("col-md-4", "mb-2");

				const sb = document.createElement("div");
				sb.classList.add("p-4", "no-gutters", "border", "rounded", "overflow-hidden", "flex-md-row", "shadow-sm", "position-relative", "h-100");
				b.appendChild(sb);

				const t = document.createElement("h3");
				t.classList.add("mb-0");
				t.appendChild(document.createTextNode(title));
				sb.appendChild(t);

				const st = document.createElement("p");
				st.classList.add("card-text", "mb-auto");
				st.appendChild(document.createTextNode(subtitle));
				sb.appendChild(st);

				blocks.appendChild(b);
			};

			// Blocks for small stats
			if(new Date("#{end_date}T23:59:59Z").getTime() >= Date.now()) {
				addBlock(Math.round((new Date("#{end_date}T23:59:59Z").getTime() - Date.now()) / (1000*3600*24)), "#{__("jours restants")}");
			}
			else {
				addBlock(Math.round((new Date("#{end_date}T23:59:59Z").getTime() - new Date("#{start_date}T00:00:00Z").getTime()) / (1000*3600*24)), "#{__("jours de contributions")}");
			}

			if(res.added) { addBlock(res.added, "#{title.toLowerCase()} ajoutés"); }
			if(res.count) { addBlock(res.count, "#{title.toLowerCase()} au total dans OSM"); }
			if(res.tasksSolved !== undefined) { addBlock(res.tasksSolved, "#{statistics.osmose_tasks}"); }
			addBlock(res.nbContributors, "#{__("personnes ayant contribué")}");

			// Leaderboard
			if(res.leaderboard) {
				let wordCloud = [];
				document.getElementById("stats-leaderboard-container").classList.remove("d-none");
				document.getElementById("stats-leaderboard-noauth").classList.add("d-none");

				const leaderboardBody = document.getElementById("stats-leaderboard");
				leaderboardBody.innerHTML = '';
				const podium = document.getElementById("stats-podium");
				podium.innerHTML = '';

				const podiumStyle = [ [125, "#F9A825"], [100, "#1E88E5"], [75, "#42A5F5"], [50, "#90CAF9"] ];

				res.leaderboard.map((lb,i) => {
					const tr = document.createElement("tr");

					const td1 = document.createElement("td");
					td1.setAttribute("scope", "row");
					td1.appendChild(document.createTextNode(lb.pos));
					td1.classList.add("align-middle");
					tr.appendChild(td1);

					const td2 = document.createElement("td");
					const td2Link = document.createElement("a");
					td2Link.href=`/users/${encodeURIComponent(lb.username)}`;
					td2Link.appendChild(document.createTextNode(lb.username));
					td2.appendChild(td2Link);
					td2.classList.add("align-middle");
					tr.appendChild(td2);

					const td3 = document.createElement("td");
					td3.appendChild(document.createTextNode(lb.amount));
					td3.classList.add("align-middle");
					tr.appendChild(td3);

					// Add to podium
					if(i < 3 || lb.userid === window.osm_user.id) {
						const podiumStep = document.createElement("div");
						podiumStep.classList.add("col", "text-center");
						podiumStep.style.transition = "opacity 1s";
						podiumStep.style.opacity = "0";
						setTimeout(() => podiumStep.style.opacity = "1", 1000*Math.min(i, 3));

						const imgLink = document.createElement("a");
						imgLink.href = td2Link.href;
						podiumStep.appendChild(imgLink);

						const imgDefault = document.createElement("img");
						imgDefault.classList.add("img-thumbnail", "mb-1");
						imgDefault.src = "/images/badges/contributed.mini.svg";
						imgDefault.style.maxWidth = "60px";
						imgDefault.style.maxHeight = "60px";
						imgLink.appendChild(imgDefault);

						// Try to load a custom user pic if any
						const imgCustom = document.createElement("img");
						imgCustom.classList.add("img-thumbnail", "mb-1", "d-none");
						imgCustom.style.maxWidth = "60px";
						imgCustom.style.maxHeight = "60px";
						imgLink.appendChild(imgCustom);

						osmApi.fetchUser(lb.userid).then(details => {
							if(details.img && details.img.href) {
								imgCustom.src = details.img.href;
								imgCustom.addEventListener("load", e => {
									imgCustom.classList.remove("d-none");
									imgDefault.classList.add("d-none");
								});
							}
						});

						const divStep = document.createElement("div");
						divStep.classList.add("text-truncate");
						divStep.style.height = `${i < 3 ? podiumStyle[i][0] : podiumStyle[3][0]}px`;
						divStep.style.backgroundColor = i < 3 ? podiumStyle[i][1] : podiumStyle[3][1];
						divStep.style.lineHeight = "1.4rem";
						divStep.appendChild(document.createTextNode(lb.pos));
						divStep.appendChild(document.createElement("br"));
						divStep.appendChild(td2Link.cloneNode(true));
						divStep.lastChild.classList.add("text-decoration-none", "text-body");
						podiumStep.appendChild(divStep);

						podium.appendChild(podiumStep);
					}

					// Set-up word cloud if any
					if(#{isRecentPast || "false"}) {
						wordCloud.push([lb.username, 10]);
					}

					return tr;
				})
				.forEach(d => leaderboardBody.appendChild(d));

				if(#{isRecentPast || "false"}) {
					const wordCloudDom = document.getElementById("word-cloud");
					wordCloudDom.classList.remove("d-none");
					wordCloud.unshift(["Merci !", 50]);
					createWordCloud(wordCloudDom, wordCloud);
				}
			}
			else {
				document.getElementById("stats-leaderboard-container").classList.add("d-none");
				document.getElementById("stats-leaderboard-noauth").classList.remove("d-none");
			}

			const yAxeLinear = { ticks: { precision: 0 } };
			const yAxeLogarithmic = {
				type: 'logarithmic',
				ticks: {
					callback: (value, index, values) => Number(value.toString())
				},
				afterBuildTicks: (chartObj) => {
					const last = chartObj.ticks.pop() || 0;
					chartObj.ticks = [0, 1, 10, 100, 1000, 10000, 100000, 1000000].filter(v => v >= last);
					if(chartObj.ticks[0] > last) { chartObj.ticks.unshift(last); }
				}
			};

			for(let scd of document.querySelectorAll(".spinner-charts")) {
				scd.classList.add("d-none");
			}

			// Notes count + chart
			if(res.chartNotes) {
				addBlock(res.openedNotes, `notes ouvertes (${res.pctClosedNotes}% résolues)`);

				const myChart = new Chart(document.getElementById("stats-chart-notes").getContext("2d"), {
					type: "line",
					data: {
						datasets: res.chartNotes
					},
					options: {
						responsive: true,
						scales: {
							xAxes: [{
								type: 'time',
								bounds: 'ticks',
								time: {
									tooltipFormat: "DD/MM",
									displayFormats: { day: "DD/MM" },
									round: "day",
									unit: "day"
								}
							}],
							yAxes: [ yAxeLinear ]
						}
					}
				});
			}
			else {
				document.getElementById("stats-chart-notes-container").classList.add("d-none");
			}

			// Evolution chart
			const ctx = document.getElementById("stats-chart").getContext("2d");
			const myChart = new Chart(ctx, {
				type: "line",
				data: {
					datasets: res.chart
				},
				options: {
					responsive: true,
					scales: {
						xAxes: [{
							type: 'time',
							bounds: 'ticks',
							time: {
								tooltipFormat: "DD/MM",
								displayFormats: { day: "DD/MM" },
								round: "day",
								unit: "day"
							}
						}],
						yAxes: [ res.pctTasksDone === undefined || parseInt(res.pctTasksDone) >= 30 ? yAxeLinear : yAxeLogarithmic ]
					}
				}
			});

			// Keys chart
			const ctx2 = document.getElementById("stats-chart-keys").getContext("2d");
			const myChart2 = new Chart(ctx2, {
				type: "bar",
				data: res.chartKeys,
				options: {
					responsive: true,
					scales: {
						xAxes: [{
							ticks: { callback: (value, index, values) => value.length > 15 ? value.slice(0, 12)+"..." : value }
						}]
					}
				}
			});
		});
	}

	let delayDisplayStats;
	const timerShowStats = () => {
		if(delayDisplayStats) { clearTimeout(delayDisplayStats); }
		delayDisplayStats = setTimeout(showStatistics, 1000);
	};

	window.addEventListener("osm_login", () => {
		timerShowStats();
	});

	window.addEventListener("osm_logout", () => {
		document.getElementById("stats-leaderboard-container").classList.add("d-none");
		document.getElementById("stats-leaderboard-noauth").classList.remove("d-none");
	});

	timerShowStats();
